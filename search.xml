<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MongoDB学习</title>
    <url>/2019/12/16/MongoDB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><a id="more"></a>
<h3 id="1-mongodb介绍"><a href="#1-mongodb介绍" class="headerlink" title="1 mongodb介绍"></a>1 mongodb介绍</h3><img src="http://qiniu.cyspace.top/static/images/MongoDB学习/1.png">
<h3 id="2-下载mongodb"><a href="#2-下载mongodb" class="headerlink" title="2 下载mongodb"></a>2 下载mongodb</h3><p>MongoDB 提供了可用于 32 位和 64 位系统的预编译二进制包，你可以从MongoDB官网下载安装。<br>官方下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a><br>本教程下载3.4版本：<a href="http://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-v3.4-latest-signed.msi" target="_blank" rel="noopener">http://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-v3.4-latest-signed.msi</a>  </p>
<h3 id="3-安装mongodb"><a href="#3-安装mongodb" class="headerlink" title="3 安装mongodb"></a>3 安装mongodb</h3><p>运行 mongodb-win32-x86_64-2008plus-ssl-v3.4-latest-signed.msi  </p>
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/2.png">
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/3.png">
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/4.png">
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/5.png">
<h3 id="4-启动mongodb"><a href="#4-启动mongodb" class="headerlink" title="4 启动mongodb"></a>4 启动mongodb</h3><p>创建几个文件夹具体如下：数据库路径(data目录)、日志路径(logs目录)和日志文件(mongo.log文件)</p>
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/6.png">
<p>创建配置文件mongo.conf，文件内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#数据库路径</span><br><span class="line">dbpath=e:\software\MongoDB\Server\3.4\data</span><br><span class="line">#日志输出文件路径</span><br><span class="line">logpath=d:\software\MongoDB\Server\3.4\logs\mongo.log</span><br><span class="line">#错误日志采用追加模式</span><br><span class="line">logappend=true</span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal=true</span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=true</span><br><span class="line">#端口号 默认为27017</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure>
<p>安装 MongoDB服务<br>通过执行bin/mongod.exe，使用—install选项来安装服务，使用—config选项来指定之前创建的配置文件。 cmd进入e:\software\MongoDB\Server\3.4\bin,(注：以下操作均以管理员的方式运行cmd)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod.exe --config &quot;e:\software\MongoDB\Server\3.4\mongo.conf&quot; --install</span><br></pre></td></tr></table></figure>
<p>启动MongoDB服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start MongoDB</span><br></pre></td></tr></table></figure>
<p>关闭MongoDB服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop MongoDB</span><br></pre></td></tr></table></figure>
<p>移除MongoDB服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;e:\software\MongoDB\Server\3.4\bin\mongod.exe&quot; ‐‐remove</span><br></pre></td></tr></table></figure>
<p>启动mongodb服务，<br>命令执行后，浏览器中输入<a href="http://127.0.0.1:27017看到如下界面即说明启动成功" target="_blank" rel="noopener">http://127.0.0.1:27017看到如下界面即说明启动成功</a></p>
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/7.png">
<p>也可以通过bin目录下的mongo.exe连接mongodb</p>
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/8.png">
<h3 id="5-mongodb入门"><a href="#5-mongodb入门" class="headerlink" title="5 mongodb入门"></a>5 mongodb入门</h3><h4 id="5-1-基础概念"><a href="#5-1-基础概念" class="headerlink" title="5.1 基础概念"></a>5.1 基础概念</h4><p>在mongodb中是通过数据库、集合、文档的方式来管理数据，下边是mongodb与关系数据库的一些概念对比:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接（MongoDB不支持）</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键,MongoDB自动在每个集合中添加_id的主键</td>
</tr>
</tbody>
</table>
</div>
<p>1、一个mongodb实例可以创建多个数据库<br>2、一个数据库可以创建多个集合<br>3、一个集合可以包括多个文档</p>
<h4 id="5-2-连接mongodb"><a href="#5-2-连接mongodb" class="headerlink" title="5.2 连接mongodb"></a>5.2 连接mongodb</h4><p>mongodb的使用方式是客户服务器模式，即使用一个客户端连接mongodb数据库（服务端）。<br>1、 命令格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br></pre></td></tr></table></figure>
<p>mongodb:// 固定前缀<br>username：账号，可不填<br>password：密码，可不填<br>host：主机名或ip地址，只有host主机名为必填项。<br>port：端口，可不填，默认27017<br>/database：连接某一个数据库<br>?options：连接参数，key/value对<br>例子：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodb://localhost 连接本地数据库27017端口</span><br><span class="line">mongodb://root:root@localhost 使用用户名root密码为root连接本地数据库27017端口</span><br><span class="line">mongodb://localhost,localhost:27018,localhost:27019，连接三台主从服务器，端口为27017、27018、27019</span><br></pre></td></tr></table></figure>
<p>2、使用mongodb自带的javascript shell（mongo.exe）连接 </p>
<p>windows版本的mongodb安装成功，在安装目录下的bin目录有mongo.exe客户端程序</p>
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/9.png">
<p>cmd状态执行mongo.exe：  </p>
<img src="http://qiniu.cyspace.top/static/images/MongoDB学习/10.png">
<p>此时就可以输入命令来操作mongodb数据库了，javascript shell可以运行javascript程序。</p>
<p>3、使用studio3T连接<br>4、使用java程序连接  </p>
<p>详细参数：<a href="http://mongodb.github.io/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/" target="_blank" rel="noopener">http://mongodb.github.io/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/</a>  </p>
<p>添加依赖：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.6.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>测试程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testConnection()&#123;</span><br><span class="line">    //创建mongodb 客户端</span><br><span class="line">    MongoClient mongoClient = new MongoClient(&quot;localhost&quot;,27017);</span><br><span class="line">    //或者采用连接字符串</span><br><span class="line">    //MongoClientURI connectionString = new</span><br><span class="line">    MongoClientURI(&quot;mongodb://root:root@localhost:27017&quot;);</span><br><span class="line">    //MongoClient mongoClient = new MongoClient(connectionString);</span><br><span class="line">    //连接数据库  </span><br><span class="line">    MongoDatabase database = mongoClient.getDatabase(&quot;test&quot;);</span><br><span class="line">    // 连接collection</span><br><span class="line">    MongoCollection&lt;Document&gt; collection = database.getCollection(&quot;student&quot;);</span><br><span class="line">    //查询第一个文档</span><br><span class="line">    Document myDoc = collection.find().first();</span><br><span class="line">    //得到文件内容 json串</span><br><span class="line">    String json = myDoc.toJson();</span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-3-数据库"><a href="#5-3-数据库" class="headerlink" title="5.3 数据库"></a>5.3 数据库</h4><p>1、查询数据库<br>show dbs 查询全部数据库<br>db 显示当前数据库<br>2、创建数据库<br>命令格式：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure>
<p>例子：<br>use test02<br>有test02数据库则切换到此数据库，没有则创建。<br>注意：<br>新创建的数据库不显示，需要至少包括一个集合。<br>3、删除数据库（慎用！！！）<br>命令格式：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>
<p>例子：<br>删除test02数据库<br>先切换数据库：use test02<br>再执行删除：db.dropDatabase()</p>
<h4 id="5-4-集合"><a href="#5-4-集合" class="headerlink" title="5.4 集合"></a>5.4 集合</h4><p>集合相当于关系数据库中的表，一个数据库可以创建多个集合，一个集合是将相同类型的文档管理起来。  </p>
<p>1、创建集合 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br><span class="line">name: 新创建的集合名称</span><br><span class="line">options: 创建参数(可选),指定有关内存大小及索引的选项</span><br></pre></td></tr></table></figure>
<p> 2、删除集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.drop()</span><br><span class="line">例子：</span><br><span class="line">db.student.drop() 删除student集合</span><br></pre></td></tr></table></figure>
<h4 id="5-5-文档"><a href="#5-5-文档" class="headerlink" title="5.5 文档"></a>5.5 文档</h4><h5 id="5-5-1-插入文档"><a href="#5-5-1-插入文档" class="headerlink" title="5.5.1 插入文档"></a>5.5.1 插入文档</h5><p>mongodb中文档的格式是json格式，下边就是一个文档，包括两个key：_id主键和name </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;5b2cc4bfa6a44812707739b5&quot;),</span><br><span class="line">	&quot;name&quot; : &quot;MongoDB初学&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br></pre></td></tr></table></figure>
<p>每个文档默认以_id作为主键，主键默认类型为ObjectId（对象类型），mongodb会自动生成主键值。<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.insert(&#123;&quot;name&quot;:&quot;初学者&quot;,&quot;age&quot;:10&#125;)</span><br></pre></td></tr></table></figure>
<p>注意：同一个集合中的文档的key可以不相同！但是建议设置为相同的。</p>
<h5 id="5-5-2-更新文档"><a href="#5-5-2-更新文档" class="headerlink" title="5.5.2 更新文档"></a>5.5.2 更新文档</h5><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">    &lt;query&gt;,</span><br><span class="line">    &lt;update&gt;,</span><br><span class="line">    &lt;options&gt;</span><br><span class="line">) </span><br><span class="line">query:查询条件，相当于sql语句的where</span><br><span class="line">update：更新文档内容</span><br><span class="line">options：选项</span><br></pre></td></tr></table></figure>
<p>1、替换文档<br>将符合条件 “name”:”初学者”的第一个文档替换为{“name”:”初学者C”,”age”:10}。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;初学者&quot;&#125;,&#123;&quot;name&quot;:&quot;初学者C&quot;,&quot;age&quot;:10&#125;)</span><br></pre></td></tr></table></figure>
<p>2、$set修改器<br>使用$set修改器指定要更新的key，key不存在则创建，存在则更新。<br>将符合条件 “name”:”初学者”的所有文档更新name和age的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;初学者&quot;&#125;,&#123;$set:&#123;&quot;name&quot;:&quot;初学者C&quot;,&quot;age&quot;:10&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure>
<p>multi：false表示更新第一个匹配的文档，true表示更新所有匹配的文档。</p>
<h5 id="5-5-3-删除文档"><a href="#5-5-3-删除文档" class="headerlink" title="5.5.3 删除文档"></a>5.5.3 删除文档</h5><p>命令格式： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.remove(&lt;query&gt;)</span><br><span class="line">query：删除条件，相当于sql语句中的where</span><br></pre></td></tr></table></figure>
<p>1、删除所有文档<br>db.student.remove({})<br>2、删除符合条件的文档<br>db.student.remove({“name”:”初学者”}) </p>
<h5 id="5-5-4-查询文档"><a href="#5-5-4-查询文档" class="headerlink" title="5.5.4 查询文档"></a>5.5.4 查询文档</h5><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br><span class="line">query：查询条件，可不填</span><br><span class="line">projection：投影查询key，可不填</span><br></pre></td></tr></table></figure>
<p>1、 查询全部 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.find()</span><br></pre></td></tr></table></figure>
<p>2、查询符合条件的记录 </p>
<p>查询name等为”初学者”的文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.find(&#123;&quot;name&quot;:&quot;初学者&quot;&#125;)</span><br></pre></td></tr></table></figure>
<p>3、投影查询<br>只显示name和age两个key，_id主键不显示 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.find(&#123;&quot;name&quot;:&quot;初学者&quot;&#125;,&#123;name:1,age:1,_id:0&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="5-6-用户"><a href="#5-6-用户" class="headerlink" title="5.6 用户"></a>5.6 用户</h4><h5 id="5-6-1-创建用户"><a href="#5-6-1-创建用户" class="headerlink" title="5.6.1 创建用户"></a>5.6.1 创建用户</h5><p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo&gt;db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">        user:&quot;&lt;name&gt;&quot;,</span><br><span class="line">        pwd:&quot;&lt;cleartext password&gt;&quot;,</span><br><span class="line">        customData:&#123;&lt;any information&gt;&#125;,</span><br><span class="line">        roles:[</span><br><span class="line">        &#123;role:&quot;&lt;role&gt;&quot;,db:&quot;&lt;database&gt;&quot;&#125;|&quot;&lt;role&gt;&quot;,</span><br><span class="line">        ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>例子：<br>创建root用户，角色为root </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">        user:&quot;root&quot;,</span><br><span class="line">        pwd:&quot;root&quot;,</span><br><span class="line">        roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>内置角色如下：</p>
<ol>
<li>数据库用户角色：read、readWrite;</li>
<li>数据库管理角色：dbAdmin、dbOwner、userAdmin；</li>
<li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li>
<li>备份恢复角色：backup、restore；</li>
<li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、<br>dbAdminAnyDatabase</li>
<li>超级用户角色：root  </li>
</ol>
<h5 id="5-6-2-查询用户"><a href="#5-6-2-查询用户" class="headerlink" title="5.6.2 查询用户"></a>5.6.2 查询用户</h5><p>查询当前库下的所有用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show users</span><br></pre></td></tr></table></figure>
<h5 id="5-6-3-删除用户"><a href="#5-6-3-删除用户" class="headerlink" title="5.6.3 删除用户"></a>5.6.3 删除用户</h5><p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropUser(&quot;用户名&quot;)</span><br></pre></td></tr></table></figure>
<p>例子：<br>删除root1用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropUser(&quot;root1&quot;)</span><br></pre></td></tr></table></figure>
<h5 id="5-6-4-修改用户"><a href="#5-6-4-修改用户" class="headerlink" title="5.6.4 修改用户"></a>5.6.4 修改用户</h5><p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.updateUser(</span><br><span class="line">    &quot;&lt;username&gt;&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">        customData:&#123;&lt;any information&gt;&#125;,</span><br><span class="line">        roles:[</span><br><span class="line">        &#123;role:&quot;&lt;role&gt;&quot;,db:&quot;&lt;database&gt;&quot;&#125;|&quot;&lt;role&gt;&quot;,</span><br><span class="line">        ...</span><br><span class="line">        ],</span><br><span class="line">        pwd:&quot;&lt;cleartext password&gt;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">	writeConcern:&#123;&lt;write concern&gt;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>例子：<br>修改root用户的角色为readWriteAnyDatabase  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.updateUser(&quot;root&quot;,&#123;roles:[&#123;role:&quot;readWriteAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="5-6-5-修改密码"><a href="#5-6-5-修改密码" class="headerlink" title="5.6.5 修改密码"></a>5.6.5 修改密码</h5><p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.changeUserPassword(&quot;username&quot;,&quot;newPasswd&quot;)</span><br></pre></td></tr></table></figure>
<p>例子：<br>修改root用户的密码为123  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.changeUserPassword(&quot;root&quot;,&quot;123&quot;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse中设置本地历史记录、代码找回</title>
    <url>/2019/12/03/Eclipse%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%9C%AC%E5%9C%B0%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E3%80%81%E4%BB%A3%E7%A0%81%E6%89%BE%E5%9B%9E/</url>
    <content><![CDATA[<h3 id="Eclipse中设置本地历史记录、代码找回"><a href="#Eclipse中设置本地历史记录、代码找回" class="headerlink" title="Eclipse中设置本地历史记录、代码找回"></a>Eclipse中设置本地历史记录、代码找回</h3><a id="more"></a>
<h4 id="一、设置本地历史记录"><a href="#一、设置本地历史记录" class="headerlink" title="一、设置本地历史记录"></a>一、设置本地历史记录</h4><p>Window -&gt; Preferences -&gt; General -&gt; Workspace -&gt; Local History</p>
<img src="http://qiniu.cyspace.top/static/images/eclipse学习/1.png">
<p>根据自己的情况进行设置，然后就可以从文件列表中直接打开本地历史记录，还集成了比较功能。</p>
<h4 id="二、代码找回"><a href="#二、代码找回" class="headerlink" title="二、代码找回"></a>二、代码找回</h4><p>SVN还原更新，本地代码没有提交，不小心代码被覆盖，代码如何找回</p>
<img src="http://qiniu.cyspace.top/static/images/eclipse学习/2.png">
<p>Eclipse中文件或目录右键——&gt;replace with——&gt;local history,然后选择日期预览文件内容</p>
]]></content>
  </entry>
  <entry>
    <title>本地未安装oracle数据库使用PL/SQL连接服务器数据库</title>
    <url>/2019/12/02/%E6%9C%AC%E5%9C%B0%E6%9C%AA%E5%AE%89%E8%A3%85oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8PL-SQL%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>由于项目测试，需要在本地连接远程的Oracle数据库<br><a id="more"></a><br>连接远程Oracle需要两个软件：</p>
<p>一个Oracle客户端</p>
<p>链接: <a href="https://pan.baidu.com/s/1EQOY3KL-cfc-1-OGBLChYQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1EQOY3KL-cfc-1-OGBLChYQ</a> 提取码: 4d24</p>
<p>一个PL/SQL开发环境 <a href="http://xz.198424.com/soft2/plsqldeveloper11.zip" target="_blank" rel="noopener">plsqldeveloper11.zip</a></p>
<p>特别说明:oracle客服端必须与pl/sql软件位数相同，如:instantclient32位和pl/sql32位</p>
<p>Oracle客户端说明</p>
<p>在Oracle客户端解压目录下新建NETWORK\ADMIN，创建tnsnames.ora文件</p>
<img src="http://qiniu.cyspace.top/static/images/Oracle学习/1.png">
<p>文件内容根据自己数据库配置IP、端口、数据库名   一定要注意格式  开头不要有空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORCL = </span><br><span class="line">    (</span><br><span class="line">        DESCRIPTION = </span><br><span class="line">            (</span><br><span class="line">                ADDRESS_LIST = </span><br><span class="line">                    (ADDRESS = (PROTOCOL = TCP)(HOST=x.x.x.x)(PORT = xxx))</span><br><span class="line">            )</span><br><span class="line">            (</span><br><span class="line">                CONNECT_DATA = </span><br><span class="line">                    (SERVICE_NAME = xxx)    </span><br><span class="line">            )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>ORCL这个是自己起的名字</p>
<p>SERVICE_NAME    这个是你要连接的名字</p>
<p> PL/SQL配置：</p>
<p>运行软件-&gt;点击取消-&gt;Tools-&gt;Preferences-&gt;Connection</p>
<p>填写Oracle Home和OCI library值</p>
<img src="http://qiniu.cyspace.top/static/images/Oracle学习/2.png">
<p>然后重启PL/SQL，下拉选择自己刚才配置的数据库，填写用户名、密码登录</p>
<p>配置完成   database  下拉框里面  就会有   你配置的名字</p>
<img src="http://qiniu.cyspace.top/static/images/Oracle学习/3.png">]]></content>
      <categories>
        <category>Oracle学习</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo搭配七牛云存储图片</title>
    <url>/2019/12/02/Hexo%E6%90%AD%E9%85%8D%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>记录Hexo博客图片存储的搭建过程，利用的七牛云存储。<br><a id="more"></a></p>
<h3 id="1、注册七牛云"><a href="#1、注册七牛云" class="headerlink" title="1、注册七牛云"></a>1、注册七牛云</h3><p>注册完成之后就可以进行创建空间了，注意我们添加的资源为对象存储，访问控制为公开空间</p>
<img src="http://qiniu.cyspace.top/static/images/qiniustudy/1.png">
<p>然后点击右上角进入密钥管理，复制当前使用的AK和SK，配置的时候会用得到</p>
<h3 id="2、安装七牛云同步插件"><a href="#2、安装七牛云同步插件" class="headerlink" title="2、安装七牛云同步插件"></a>2、安装七牛云同步插件</h3><p>需要nodejs环境，具体请参考博客内文章nodejs学习</p>
<p>在hexo主目录下执行如下命令:</p>
<p><code>npm install hexo-qiniu-sync - -save</code></p>
<p>然后把配置信息添加到_config.yml中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  - hexo-qiniu-sync</span><br><span class="line"></span><br><span class="line">#七牛云存储设置</span><br><span class="line">##offline       是否离线. 离线状态将使用本地地址渲染</span><br><span class="line">##sync          是否同步</span><br><span class="line">##bucket        空间名称.(请与你七牛云创建的公开空间名称保持一致)</span><br><span class="line">##access_key    上传密钥AccessKey</span><br><span class="line">##secret_key    上传密钥SecretKey</span><br><span class="line">##secret_file   秘钥文件路径，可以将上述两个属性配置到文件内，防止泄露，json格式。绝对路径相对路径均可(注意:如在_config.yml中配置access_key和secret_key请注释此行)</span><br><span class="line">##dirPrefix     上传的资源子目录前缀.如设置，需与urlPrefix同步 </span><br><span class="line">##urlPrefix     外链前缀.(配置为自定义域名或者使用七牛云提供的免费融合CDN域名)</span><br><span class="line">##up_host      上传服务器路径,如选择华北区域的话配置为http://up-z1.qiniu.com</span><br><span class="line">##local_dir     本地目录.</span><br><span class="line">##update_exist  是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span><br><span class="line">##image/js/css  子参数folder为不同静态资源种类的目录名称，一般不需要改动</span><br><span class="line">##image.extend  这是个特殊参数，用于生成缩略图或加水印等操作。具体请参考http://developer.qiniu.com/docs/v6/api/reference/fop/image/ </span><br><span class="line">##              可使用基本图片处理、高级图片处理、图片水印处理这3个接口。例如 ?imageView2/2/w/500 即生成宽度最多500px的缩略图</span><br><span class="line">qiniu:</span><br><span class="line">  offline: false</span><br><span class="line">  sync: true</span><br><span class="line">  bucket: bucket_name</span><br><span class="line">  secret_file: sec/qn.json or C:</span><br><span class="line">  access_key: AccessKey</span><br><span class="line">  secret_key: SecretKey</span><br><span class="line">  dirPrefix: static</span><br><span class="line">  urlPrefix: http://bucket_name.qiniudn.com/static</span><br><span class="line">  up_host: http://upload.qiniu.com</span><br><span class="line">  local_dir: static</span><br><span class="line">  update_exist: true</span><br><span class="line">  image: </span><br><span class="line">    folder: images</span><br><span class="line">    extend: </span><br><span class="line">  js:</span><br><span class="line">    folder: js</span><br><span class="line">  css:</span><br><span class="line">    folder: css</span><br></pre></td></tr></table></figure>
<p>其中各个参数在插件的<a href="https://github.com/gyk001/hexo-qiniu-sync/blob/master/README.md" target="_blank" rel="noopener">README</a>文件中都有详细的介绍，按照github上的教程一步一步来是很简单的。</p>
<p>然后在hexo主目录下创建本地目录（该目录要和配置中local_dir参数保持一致）</p>
<p>为了安全起见，我们把access_key 和secret_key配置在qn.json中，在hexo主目录新建sec文件夹，在sec文件夹下面创建qn.json</p>
<img src="http://qiniu.cyspace.top/static/images/qiniustudy/2.png">
<img src="http://qiniu.cyspace.top/static/images/qiniustudy/3.png">
<p>配置文件内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;access_key&quot;: &quot;你的AccessKey&quot;,</span><br><span class="line">	&quot;secret_key&quot;: &quot;你的SecretKey&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于七牛云融合 CDN 测试域名时间为一个月所以我们需要自定义域名</p>
<p>1、打开七牛云融合CDN域名管理</p>
<p>2、添加域名</p>
<p> 加速域名输入一个二级域名 ，条件就是主域名要备案，我这里输入的是qiniu.cyspace.top</p>
<img src="http://qiniu.cyspace.top/static/images/qiniustudy/4.png">
<img src="http://qiniu.cyspace.top/static/images/qiniustudy/5.png">
<p>3、 添加解析。博主的域名是在万网买的，自然去万网后台 </p>
<p>配置域名的CNAME请参考:<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">帮助</a> </p>
<h3 id="3、同步图片到七牛云空间"><a href="#3、同步图片到七牛云空间" class="headerlink" title="3、同步图片到七牛云空间"></a>3、同步图片到七牛云空间</h3><p>执行命令：<code>hexo s</code></p>
]]></content>
  </entry>
  <entry>
    <title>nodejs学习</title>
    <url>/2019/11/25/nodejs%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="一、nodejs下载"><a href="#一、nodejs下载" class="headerlink" title="一、nodejs下载"></a>一、nodejs下载</h4><p>下载nodejs，官网：<a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a></p>
<h4 id="二、nodejs安装"><a href="#二、nodejs安装" class="headerlink" title="二、nodejs安装"></a>二、nodejs安装</h4><p>下载完成之后，双击”nodejs安装文件”，开始安装nodejs，自定义安装在F:\nodejs下面。在cmd控制台输入：node -v，控制台将打印出：v10.16.0，出现版本提示表示安装成功。</p>
<h4 id="三、npm配置"><a href="#三、npm配置" class="headerlink" title="三、npm配置"></a>三、npm配置</h4><p>npm默认的仓库地址是在国外网站，速度较慢，建议大家设置到淘宝镜像。但是切换镜像是比较麻烦的。推荐一款切换镜像的工具：nrm</p>
<p>我们首先安装nrm，这里<code>-g</code>代表全局安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install nrm -g</span><br></pre></td></tr></table></figure>
<p>然后通过<code>nrm ls</code>命令查看npm的仓库列表,带*的就是当前选中的镜像仓库</p>
<p>通过<code>nrm use taobao</code>来指定要使用的镜像源</p>
<p>然后通过<code>nrm test npm</code>来测试速度</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
</search>
